[project]
name = "media-downloader"
version = "1.0.0"
description = "A Python API service for downloading media from URLs via HTTP endpoints and RabbitMQ messaging"
readme = "README.md"
requires-python = ">=3.8.1"
license = { text = "MIT" }
authors = [
    { name = "Media Downloader Contributors" }
]
keywords = ["media", "downloader", "yt-dlp", "fastapi", "rabbitmq"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastapi>=0.95.0",
    "uvicorn>=0.21.0",
    "pydantic>=1.10.7",
    "yt-dlp>=2023.3.4",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
rabbitmq = [
    "aio-pika>=9.0.5",
    "pika>=1.3.1",
]
plex = [
    "plexapi>=4.13.2",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "httpx>=0.24.0",
    "requests>=2.25.0",
    "deptry>=0.12.0",
]
all = [
    "media-downloader[rabbitmq,plex,dev]",
]

[project.scripts]
media-downloader = "src.main:main"
send-test-message = "src.send_test_message:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "httpx>=0.24.0",
    "requests>=2.25.0",
    "deptry>=0.12.0",
]

[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--strict-markers --tb=short"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.ruff]
# Same as flake8 settings
line-length = 127
target-version = "py38"

[tool.ruff.lint]
# Enable flake8-bugbear (`B`) rules, in addition to the `E` and `F` rules.
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "B",  # flake8-bugbear
    "C90", # mccabe complexity
]

# Same ignore patterns as the current flake8 setup
ignore = [
    "E501",  # Line too long (we use line-length instead)
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.extend-per-file-ignores]
# Tests can use magic values, assertions, and longer lines
"tests/*" = ["E501", "B011"]

[tool.deptry]
pep621_dev_dependency_groups = ["dev"]
per_rule_ignores = { "DEP002" = ["media-downloader"], "DEP004" = ["requests"] }